CREATE DATABASE li_chess;


CREATE TABLE users(
id int  AUTO_INCREMENT PRIMARY KEY,
name varchar(255)
);


CREATE TABLE profile(
user_id int  PRIMARY KEY,
country varchar(256),
location varchar(256),
user_rating int,
email varchar(256) UNIQUE NOT NULL,
created_at datetime DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE games(
id int  AUTO_INCREMENT PRIMARY KEY,
user_id int,
type_game_id int,
white int NOT NULL  comment'user_id',
black int NOT NULL  comment 'user_id',
status_id int,
result_game float UNSIGNED comment '1 - white winner, 0- black winner, 0,5 - draw',
tournament_id int,
start_at datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
finished_at datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE status_game(
id int  AUTO_INCREMENT PRIMARY KEY,
name varchar(256)
);

CREATE TABLE types_game(
id int  AUTO_INCREMENT PRIMARY KEY,
name varchar(256),
game_time time
);

CREATE TABLE tournaments(
id int  AUTO_INCREMENT PRIMARY KEY,
name varchar (256),
type_game_id int,
club_id int,
start_at datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
finished_at datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
status_id int);

CREATE TABLE tournaments_winners (
tournament_id int PRIMARY KEY,
winner_id int
);

CREATE TABLE messages (
id int  AUTO_INCREMENT PRIMARY KEY,
from_user_id int,
to_user_id int,
body TEXT (65535),
created_at timestamp DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE clubs(
id int  AUTO_INCREMENT PRIMARY KEY,
name varchar (150),
created_at timestamp DEFAULT CURRENT_TIMESTAMP,
is_closed bool
);

CREATE TABLE clubs_members(
club_id int,
user_id int,
is_admin bool,
is_banned bool
);

CREATE TABLE subscribes (
user_id int not null,
to_user_id int not null
);

CREATE TABLE languages (
id int AUTO_INCREMENT PRIMARY KEY,
name varchar(256)
);

CREATE TABLE speak_languages(
id int AUTO_INCREMENT PRIMARY KEY,
language_id int,
trainer_id int
);

CREATE TABLE trainers_profiles (
trainer_id int  PRIMARY KEY,
country varchar(256),
location varchar(256),
rating int,
ratio_for_hour int,
email varchar(256) UNIQUE NOT NULL,
availibility bool,
created_at datetime DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE trainers (
id int AUTO_INCREMENT PRIMARY KEY,
name varchar(256) NOT NULL,
);

CREATE TABLE boards (
id int AUTO_INCREMENT PRIMARY KEY,
name varchar(16),
board JSON
);


CREATE TABLE figures_types (
id int AUTO_INCREMENT PRIMARY KEY,
name varchar(16),
figures_type JSON
);


CREATE TABLE theams(
id int AUTO_INCREMENT PRIMARY KEY,
name varchar(16), 
theam JSON
);

DROP TABLE figures;
CREATE TABLE figures(
id int AUTO_INCREMENT PRIMARY KEY,
name varchar(16),
shot_name varchar(16),
pict json
);

CREATE TABLE settings(
id int AUTO_INCREMENT PRIMARY KEY,
user_id int,
boards_id int,
language_id int,
figures_type_id int,
theam_id int
);

CREATE TABLE moves (
game_id int NOT NULL,
move_number int,
user_id int NOT NULL,
figure_id int,
`field` int
);


-- Вставка значений --

INSERT INTO figures(name, shot_name) VALUES
('king', 'K'), ('queen','Q'), ('rook','R'), ('knight','N'),('bishop','B'),('pawn','P');

INSERT INTO theams(name) VALUES
('Dark'), ('Light'), ('Shapes'),('Anthracite'), ('Blue Maze'),('Red Maze'), ('Wood');

INSERT INTO languages(name) VALUES
('English'), ('French'), ('German'),('Russian'), ('Spain'),('Chinese'), ('Italian');

INSERT INTO boards(name) VALUES
('Brown'), ('Blue'), ('Grey'),('Purple'), ('Wood'),('Maple');

INSERT INTO figures_types(name) VALUES
('Merida'), ('Pirouetti'), ('Alpha'),('Spatial'), ('Companion'),('Leipzig');

-- Устанавливаем  значения winner_id в tournaments_winners --

UPDATE tournaments
SET 
status_id = 3
WHERE status_id =3;


UPDATE games g, tournaments t
SET g.type_game_id = LEFT(t.id,1)
WHERE t.id = g.tournament_id;

UPDATE games g, tournaments t 
SET g.status_id = t.status_id 
WHERE g.tournament_id = t.id; 

UPDATE games g, tournaments t
SET g.start_at = t.start_at
WHERE t.id = g.type_game_id;

UPDATE settings  SET user_id = id;

UPDATE status_game SET name ='not_started' WHERE id = 1;
UPDATE status_game SET name ='playing' WHERE id = 2;
UPDATE status_game SET name ='finished' WHERE id = 3;

UPDATE types_game SET name = 'bullet', game_time = '0:03:00' WHERE id = 1;
UPDATE types_game SET name = 'blitz', game_time = '0:05:00' WHERE id = 2;
UPDATE types_game SET name = 'rapid', game_time = '0:10:00' WHERE id = 3;
UPDATE types_game SET name = 'classical', game_time = '0:15:00' WHERE id = 4;
UPDATE types_game SET name = 'custom' WHERE id = 5;

UPDATE games SET white = white+3 WHERE white = black;
UPDATE games SET finished_at = start_at + INTERVAL 3*1.8 MINUTE  WHERE type_game_id = 1;
UPDATE games SET finished_at = start_at + INTERVAL 5*1.8 MINUTE  WHERE type_game_id = 2;
UPDATE games SET finished_at = start_at + INTERVAL 10*1.8 MINUTE  WHERE type_game_id = 3;
UPDATE games SET finished_at = start_at + INTERVAL 15*1.8 MINUTE  WHERE type_game_id = 4;
UPDATE games SET finished_at = start_at + INTERVAL 3 HOUR  WHERE type_game_id = 5;
UPDATE games SET result_game = 0.5 WHERE result_game = 5;

UPDATE messages SET from_user_id = from_user_id+3 WHERE from_user_id = to_user_id;
UPDATE subscribes SET user_id = user_id + 1 WHERE user_id = to_user_id;

UPDATE games 
SET tournament_id = NULL 
WHERE id %30 = 0;





-- Ограничения --

ALTER TABLE clubs_members ADD CONSTRAINT clubs_members_club_id_fk FOREIGN KEY (club_id) REFERENCES clubs(id);
ALTER TABLE clubs_members ADD CONSTRAINT clubs_members_user_id_fk FOREIGN KEY (user_id) REFERENCES users(id);

ALTER TABLE tournaments ADD CONSTRAINT tournaments_type_game_id_fk FOREIGN KEY (type_game_id) REFERENCES types_game(id);
ALTER TABLE tournaments ADD CONSTRAINT tournaments_club_id_fk FOREIGN KEY (club_id) REFERENCES clubs(id);
ALTER TABLE tournaments ADD CONSTRAINT tournaments_status_id_fk FOREIGN KEY (status_id) REFERENCES status_game(id);
ALTER TABLE tournaments ADD CONSTRAINT tournaments_winner_id_fk FOREIGN KEY (winner_id) REFERENCES users(id);


ALTER TABLE games ADD CONSTRAINT games_type_game_id_fk FOREIGN KEY (type_game_id) REFERENCES types_game(id);
ALTER TABLE games ADD CONSTRAINT games_white_fk FOREIGN KEY (white) REFERENCES users(id);
ALTER TABLE games ADD CONSTRAINT games_black_fk FOREIGN KEY (black) REFERENCES users(id);
ALTER TABLE games ADD CONSTRAINT games_status_id_fk FOREIGN KEY (status_id) REFERENCES status_game(id);
ALTER TABLE games ADD CONSTRAINT games_tournament_id_fk FOREIGN KEY (tournament_id) REFERENCES tournaments(id);

ALTER TABLE messages ADD CONSTRAINT messages_from_user_id_fk FOREIGN KEY (from_user_id) REFERENCES users(id);
ALTER TABLE messages ADD CONSTRAINT messages_to_user_id_fk FOREIGN KEY (to_user_id) REFERENCES users(id);

ALTER TABLE moves ADD CONSTRAINT moves_user_id_fk FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE moves ADD CONSTRAINT moves_figure_id_fk FOREIGN KEY (figure_id) REFERENCES figures(id);
ALTER TABLE moves ADD CONSTRAINT moves_game_id_fk FOREIGN KEY (game_id) REFERENCES games(id);

ALTER TABLE profile ADD  CONSTRAINT profile_white_fk FOREIGN KEY (user_id) REFERENCES users(id);

ALTER TABLE settings DROP id;
ALTER TABLE settings MODIFY user_id int UNIQUE PRIMARY KEY;
ALTER TABLE settings ADD CONSTRAINT settings_user_id_fk FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE settings ADD CONSTRAINT settings_board_id_fk FOREIGN KEY (board_id) REFERENCES boards(id);
ALTER TABLE settings ADD CONSTRAINT settings_language_id_fk FOREIGN KEY (language_id) REFERENCES languages(id);
ALTER TABLE settings ADD CONSTRAINT settings_figures_type_id_fk FOREIGN KEY (figures_type_id) REFERENCES figures_types(id);
ALTER TABLE settings ADD CONSTRAINT settings_theam_id_fk FOREIGN KEY (theam_id) REFERENCES theams(id);

ALTER TABLE subscribes ADD CONSTRAINT subscribes_user_id_fk FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE subscribes ADD CONSTRAINT subscribes_to_user_id_fk FOREIGN KEY (to_user_id) REFERENCES users(id);
ALTER TABLE subscribes ADD CONSTRAINT PRIMARY KEY (user_id,to_user_id);

ALTER TABLE speak_languages ADD CONSTRAINT speak_languages_trainer_id_fk FOREIGN KEY (trainer_id) REFERENCES trainers(id);
ALTER TABLE speak_languages ADD CONSTRAINT speak_languages_language_id_fk FOREIGN KEY (language_id) REFERENCES languages(id);

ALTER TABLE trainers_profiles ADD CONSTRAINT trainers_profiles_trainer_id_fk FOREIGN KEY (trainer_id) REFERENCES trainers(id);

ALTER TABLE tournaments_winners ADD CONSTRAINT tournaments_winners_tournament_id_fk FOREIGN KEY (tournament_id) REFERENCES tournaments(id);
ALTER TABLE tournaments_winners ADD CONSTRAINT tournaments_winners_winner_id_fk FOREIGN KEY (winner_id) REFERENCES users(id);


   -- Индексы --
   
CREATE INDEX games_status_id_idx ON games(status_id);
CREATE INDEX games_type_game_id_idx ON games(type_game_id);
CREATE INDEX tournaments_status_id_idx ON tournaments(status_id);
CREATE INDEX tournaments_type_game_id_idx ON tournaments(status_id);
CREATE INDEX moves_game_id_user_id_move_number_idx ON moves (game_id,user_id,move_number);



-- Запросы --

-- Победители завершенных турниров --

SELECT  u.id, u.name, t.name FROM users u, tournaments t, tournaments_winners tw
WHERE t.status_id = 3 AND tw.winner_id = u.id;


-- Количество русскоязычных подписчиков у пользователя '40' --

SELECT DISTINCT COUNT(*)  FROM 
subscribes sb
left JOIN settings st
ON sb.user_id = st.user_id
WHERE sb.to_user_id=40 AND st.language_id =4;


-- Количество очков, которое набрал игрок 'quam' в турнире 'Okuneva-Will' --

SELECT SUM(s.result_game) as total_scores FROM
(SELECT  u.id,g.result_game as result_game FROM
games g
LEFT JOIN
users u
ON u.id=g.white
LEFT JOIN 
tournaments t
ON g.tournament_id = t.id
WHERE t.name = 'Okuneva-Will' AND u.name = 'quam'
UNION ALL
SELECT u.id, (1-g.result_game) as result_game FROM
games g
LEFT JOIN
users u
ON u.id=g.black
LEFT JOIN 
tournaments t
ON g.tournament_id = t.id
WHERE t.name = 'Okuneva-Will' AND u.name = 'quam') as s;

-- Таблица турнира с id = 6 --

SELECT DISTINCT u.id, u.name, p.country, scores_sum(u.id, t.id) as scores, p.user_rating
FROM users u
JOIN games g
ON u.id = g.black or u.id = g.white
JOIN tournaments t
ON g.tournament_id = t.id
JOIN profile p 
ON u.id=p.user_id
WHERE t.id =6
ORDER BY scores DESC , user_rating DESC; 



-- Самый представленный клуб в турнире 'Roberts-Graham' --

SELECT  cl.id, cl.name, COUNT(*) as amount_of_members
FROM games g
JOIN clubs_members cm
ON g.white = cm.user_id OR g.black = cm.user_id
JOIN clubs cl
ON cm.club_id = cl.id
JOIN tournaments t
ON t.id = g.tournament_id
WHERE t.name = 'Roberts-Graham'
GROUP by cl.id
order by amount_of_members DESC limit 1;


      -- Представления --
      
      
      
  -- Текущие турниры --
  
CREATE VIEW current_tournaments as 
SELECT  DISTINCT t.name, tg.name as type_game, t.start_at 
FROM tournaments t
LEFT JOIN types_game tg
ON tg.id = t.type_game_id
WHERE t.status_id = 2;

-- Доступные тренеры --

CREATE VIEW available_trainers as 
SELECT t.id, t.name, tp.ratio_for_hour FROM
trainers t
JOIN
trainers_profiles tp 
ON t.id = tp.trainer_id
WHERE tp.availibility = 1;

-- Действующие клубы --

CREATE VIEW open_clubs as 
SELECT DISTINCT   c.id, c.name,
COUNT(cm.user_id) OVER(PARTITION BY cm.club_id) as amount_of_members 
FROM clubs c
JOIN clubs_members cm
on cm.club_id = c.id
WHERE is_closed is NULL;


      -- Функции --
      
  
  -- Подсчет очков игрока в турнире --
  
  CREATE FUNCTION scores_sum (u1 int, t1 int)
RETURNS float(5,1) MODIFIES SQL DATA

BEGIN

RETURN(
SELECT SUM(s.result_game) as total_scores FROM
(SELECT  u.id,g.result_game as result_game FROM
games g
LEFT JOIN
users u
ON u.id=g.white
WHERE g.tournament_id = t1 AND u.id = u1
UNION ALL
SELECT u.id, (1-g.result_game) as result_game FROM
games g
LEFT JOIN
users u
ON u.id=g.black
WHERE g.tournament_id = t1 AND u.id = u1) as s);	
	
END //


     --Триггеры--
     
     -- Установка winner_id после окончания турнира--
     -- При равенстве очков дополнительным показателем является рейтинг игрока --
     
     CREATE TRIGGER set_tournament_winner AFTER UPDATE on tournaments
for EACH ROW
BEGIN	
IF (NEW.status_id = 3) THEN 
INSERT INTO  tournaments_winners(winner_id,tournament_id)
SELECT u.id, t.id
FROM users u
JOIN games g
ON u.id = g.black or u.id = g.white
JOIN tournaments t
ON g.tournament_id = t.id
JOIN profile p 
ON u.id=p.user_id
WHERE t.id = NEW.id
ORDER BY scores_sum(u.id, t.id) DESC, user_rating DESC LIMIT 1;
END IF;
END//  
  
